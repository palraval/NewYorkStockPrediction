---
title: "Biostat 212a Homework 6"
subtitle: "Due Mar 22, 2025 @ 11:59PM"
author: "Palash Raval and 406551574"
date: today
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
engine: knitr
knitr:
  opts_chunk: 
    fig.align: 'center'
    # fig.width: 6
    # fig.height: 4
    message: FALSE
    cache: false
---

Load R libraries.
```{r}
library(tidyverse)
library(tidymodels)
library(readr)
library(tswge)
library(ggplot2)
library(yardstick)
library(ranger)

acfdf <- function(vec) {
    vacf <- acf(vec, plot = F)
    with(vacf, data.frame(lag, acf))
}

ggacf <- function(vec) {
    ac <- acfdf(vec)
    ggplot(data = ac, aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + 
        geom_segment(mapping = aes(xend = lag, yend = 0))
}

tplot <- function(vec) {
    df <- data.frame(X = vec, t = seq_along(vec))
    ggplot(data = df, aes(x = t, y = X)) + geom_line()
}
```

## New York Stock Exchange (NYSE) data (1962-1986) (140 pts)

The [`NYSE.csv`](https://raw.githubusercontent.com/ucla-biostat-212a/2025winter/master/slides/data/NYSE.csv) file contains three daily time series from the New York Stock Exchange (NYSE) for the period Dec 3, 1962-Dec 31, 1986 (6,051 trading days).

- `Log trading volume` ($v_t$): This is the fraction of all outstanding shares that are traded on that day, relative to a 100-day moving average of past turnover, on the log scale.
    
- `Dow Jones return` ($r_t$): This is the difference between the log of the Dow Jones Industrial Index on consecutive trading days.
    
- `Log volatility` ($z_t$): This is based on the absolute values of daily price movements.

```{r}
# Read in NYSE data from url

url = "https://raw.githubusercontent.com/ucla-biostat-212a/2025winter/master/slides/data/NYSE.csv"
NYSE <- read_csv(url)

NYSE
```
The **autocorrelation** at lag $\ell$ is the correlation of all pairs $(v_t, v_{t-\ell})$ that are $\ell$ trading days apart. These sizable correlations give us confidence that past values will be helpful in predicting the future.

```{r}
#| code-fold: true
#| label: fig-nyse-autocor
#| fig-cap: "The autocorrelation function for log volume. We see that nearby values are fairly strongly correlated, with correlations above 0.2 as far as 20 days apart."

ggacf(NYSE$log_volume) + ggthemes::theme_few()

```

Do a similar plot for (1) the correlation between $v_t$ and lag $\ell$ `Dow Jones return` $r_{t-\ell}$ and (2) correlation between $v_t$ and lag $\ell$ `Log volatility` $z_{t-\ell}$.

```{r}
seq(1, 30) %>% 
  map(function(x) {cor(NYSE$log_volume , lag(NYSE$DJ_return, x), use = "pairwise.complete.obs")}) %>% 
  unlist() %>% 
  tibble(lag = 1:30, cor = .) %>% 
  ggplot(aes(x = lag, y = cor)) + 
  geom_hline(aes(yintercept = 0)) + 
  geom_segment(mapping = aes(xend = lag, yend = 0)) + 
  ggtitle("AutoCorrelation between `log volume` and lagged `DJ return`")
```


```{r}
seq(1, 30) %>% 
  map(function(x) {cor(NYSE$log_volume , lag(NYSE$log_volatility, x), use = "pairwise.complete.obs")}) %>% 
  unlist() %>% 
  tibble(lag = 1:30, cor = .) %>% 
  ggplot(aes(x = lag, y = cor)) + 
  geom_hline(aes(yintercept = 0)) + 
  geom_segment(mapping = aes(xend = lag, yend = 0)) + 
  ggtitle("AutoCorrelation between `log volume` and lagged `log volatility`")
```

### Project goal

Our goal is to forecast daily `Log trading volume`, using various machine learning algorithms we learnt in this class. 

The data set is already split into train (before Jan 1st, 1980, $n_{\text{train}} = 4,281$) and test (after Jan 1st, 1980, $n_{\text{test}} = 1,770$) sets.

<!-- Include `day_of_week` as a predictor in the models. -->

In general, we will tune the lag $L$ to acheive best forecasting performance. In this project, we would fix $L=5$. That is we always use the previous five trading days' data to forecast today's `log trading volume`.

Pay attention to the nuance of splitting time series data for cross validation. Study and use the [`time-series`](https://www.tidymodels.org/learn/models/time-series/) functionality in tidymodels. Make sure to use the same splits when tuning different machine learning algorithms.

Use the $R^2$ between forecast and actual values as the cross validation and test evaluation criterion.

### Baseline method (20 pts)

We use the straw man (use yesterdayâ€™s value of `log trading volume` to predict that of today) as the baseline method. Evaluate the $R^2$ of this method on the test data.

```{r}
L = 5

for(i in seq(1, L)) {
  NYSE = NYSE %>% 
    mutate(!!paste("DJ_return_lag", i, sep = "") := lag(NYSE$DJ_return, i),
           !!paste("log_volume_lag", i, sep = "") := lag(NYSE$log_volume, i),
           !!paste("log_volatility_lag", i, sep = "") := lag(NYSE$log_volatility, i))
}

NYSE = NYSE %>% na.omit()
```

```{r}
NYSE_training = NYSE %>% 
  filter(train == 'TRUE') %>%
  select(-train) %>%
  drop_na()

dim(NYSE_training)
```

```{r}
NYSE_test = NYSE %>% 
  filter(train == 'FALSE') %>%
  select(-train) %>%
  drop_na()

dim(NYSE_test)
```

```{r}
r2_test_value = rsq_vec(NYSE_test$log_volume, NYSE_test$log_volume_lag1)

print(paste("Straw man test R2:", r2_test_value))
```


### Autoregression (AR) forecaster (30 pts)

- Let
$$
y = \begin{pmatrix} v_{L+1} \\ v_{L+2} \\ v_{L+3} \\ \vdots \\ v_T \end{pmatrix}, \quad M = \begin{pmatrix}
1 & v_L & v_{L-1} & \cdots & v_1 \\
1 & v_{L+1} & v_{L} & \cdots & v_2 \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
1 & v_{T-1} & v_{T-2} & \cdots & v_{T-L}
\end{pmatrix}.
$$

- Fit an ordinary least squares (OLS) regression of $y$ on $M$, giving
$$
\hat v_t = \hat \beta_0 + \hat \beta_1 v_{t-1} + \hat \beta_2 v_{t-2} + \cdots + \hat \beta_L v_{t-L},
$$
known as an **order-$L$ autoregression** model or **AR($L$)**.

- Tune AR(5) with elastic net (lasso + ridge) regularization using all 3 features on the training data, and evaluate the test performance. 

- Hint: [Workflow: Lasso](https://ucla-biostat-212a.github.io/2025winter/slides/06-modelselection/workflow_lasso.html) is a good starting point.


```{r}
# Read in NYSE data from url

url = "https://raw.githubusercontent.com/ucla-biostat-212a/2025winter/master/slides/data/NYSE.csv"
NYSE <- read_csv(url)

NYSE
```

```{r}
NYSE_training = NYSE %>% 
  filter(train == 'TRUE') %>%
  select(-train) %>%
  drop_na()

dim(NYSE_training)
```

```{r}
NYSE_test = NYSE %>% 
  filter(train == 'FALSE') %>%
  select(-train) %>%
  drop_na()

dim(NYSE_test)
```


```{r}
NYSE %>%
  ggplot(aes(x = date, y = log_volume)) + 
  geom_line() + 
  geom_smooth(method = "lm")
```

```{r}
wrong_split <- initial_split(NYSE_training)

bind_rows(
  training(wrong_split) %>% mutate(type = "train"),
  testing(wrong_split) %>% mutate(type = "test")
) %>% 
  ggplot(aes(x = date, y = log_volume, color = type, group = NA)) + 
  geom_line()
```

```{r}
correct_split <- initial_time_split(NYSE_training %>% arrange(date))

bind_rows(
  training(correct_split) %>% mutate(type = "train"),
  testing(correct_split) %>% mutate(type = "test")
) %>% 
  ggplot(aes(x = date, y = log_volume, color = type, group = NA)) + 
  geom_line()
```

```{r}
rolling_origin(NYSE_training %>% arrange(date), initial = 30, 
               assess = 5, cumulative = F) %>%
  mutate(train_data = map(splits, analysis),
         test_data = map(splits, assessment)) %>% 
  select(-splits) %>% 
  pivot_longer(-id) %>% 
  filter(id %in% c("Slice0001", "Slice0100", "Slice1000")) %>% 
  unnest(value) %>% 
  ggplot(aes(x = date, y = log_volume, color = name, group = NA)) + 
  geom_point() + 
  geom_line() +
  facet_wrap(~id, scales = "free")
```

```{r}
sliding_period(NYSE_training %>% arrange(date), 
               date, period = "month", lookback = Inf, assess_stop = 1) %>% 
  mutate(train_data = map(splits, analysis),
         test_data = map(splits, assessment)) %>% 
  select(-splits) %>% 
  pivot_longer(-id) %>% 
  filter(id %in% c("Slice001", "Slice050", "Slice100")) %>% 
  unnest(value) %>% 
  ggplot(aes(x = date, y = log_volume, color = name, group = NA)) + 
  geom_point() +
  geom_line() + 
  facet_wrap(~id, scales = "free")
```

```{r}
elastic_net_recipe = recipe(data = NYSE_training, log_volume ~ .) %>%
  step_rm(day_of_week) %>%
  step_lag(DJ_return, log_volatility, lag = 1:5) %>%
  step_dummy(all_nominal(), -all_outcomes()) %>%
  step_normalize(all_numeric_predictors(), -all_outcomes()) %>%
  step_naomit(all_predictors()) %>%
  prep(data = NYSE_training)
```

```{r}
elastic_net_model = linear_reg(penalty = tune(), mixture = tune()) %>%
  set_engine("glmnet")
```

```{r}
elastic_net_workflow = workflow() %>%
  add_model(elastic_net_model) %>%
  add_recipe(elastic_net_recipe %>% step_rm(date) %>% step_indicate_na())
```

```{r}
folds = NYSE_training %>% 
  arrange(date) %>%
  rolling_origin(initial = 30, assess = 5)
```

```{r}
month_folds = NYSE_training %>%
  sliding_period(date, "month", lookback = Inf, skip = 4)
```

```{r}
elastic_net_grid = grid_regular(penalty(range = c(-7, -3), 
                                        log10_trans()), 
                                mixture(), levels = 5)

elastic_net_grid
```

```{r}
elastic_net_fit = tune_grid(elastic_net_workflow, resamples = month_folds, 
                            grid = elastic_net_grid)
```

```{r}
elastic_net_fit %>%
  collect_metrics() %>%
  filter(.metric == "rsq") %>%
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) + 
  geom_point() +
  labs(x = "Penalty", y = "CV RSQ")
```

```{r}
best_elastic_net = elastic_net_fit %>% select_best(metric = "rmse")

best_elastic_net
```


```{r}
# CV R2

elastic_net_fit %>% 
  collect_metrics() %>%
  filter(.metric == "rsq") %>%
  filter(penalty == best_elastic_net$penalty & 
           mixture == best_elastic_net$mixture)
```

```{r}
elastic_net_final_workflow = elastic_net_workflow %>%
  finalize_workflow(best_elastic_net)
```

```{r}
final_elastic_model = elastic_net_final_workflow %>%
  fit(NYSE_training)

test_predictions = final_elastic_model %>% predict(new_data = NYSE_test) %>%
  bind_cols(NYSE_test)

evaluation_metrics = test_predictions %>%
  metrics(truth = log_volume, estimate = .pred)

evaluation_metrics
```



### Random forest forecaster (30pts)

- Use the same features as in AR($L$) for the random forest. Tune the random forest and evaluate the test performance.

- Hint: [Workflow: Random Forest for Prediction](https://ucla-biostat-212a.github.io/2025winter/slides/08-tree/workflow_rf_reg.html) is a good starting point.

```{r}
random_forest_recipe = recipe(data = NYSE_training, 
                         log_volume ~ .) %>%
  step_rm(day_of_week) %>%
  step_lag(DJ_return, log_volatility, lag = 1:5) %>%
  step_naomit(all_predictors()) %>%
  step_zv(all_numeric_predictors()) %>%
  prep(data = NYSE_training)
```

```{r}
random_forest_model = rand_forest(mode = "regression",
                                  mtry = tune(), 
                                  trees = tune()) %>%
  set_engine("ranger")
```

```{r}
random_forest_workflow = workflow() %>%
  add_model(random_forest_model) %>%
  add_recipe(random_forest_recipe %>% step_rm(date) %>% step_indicate_na())
```

```{r}
random_forest_grid = grid_regular(trees(range = c(75L, 250L)), 
                                  mtry(range = c(1L, 5L)),
                                  levels = c(3,5))
```

```{r}
random_forest_fit = tune_grid(random_forest_workflow, resamples = month_folds, 
                            grid = random_forest_grid)
```

```{r}
random_forest_fit %>%
  collect_metrics() %>%
  filter(.metric == "rsq") %>%
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) + 
  geom_point() +
  labs(x = "Number of Trees", y = "RSQ")
```

```{r}
best_random_forest = random_forest_fit %>% select_best(metric = "rsq")

best_random_forest
```


```{r}

# CV R2

random_forest_fit %>% 
  collect_metrics() %>%
  filter(.metric == "rsq") %>%
  filter(trees == best_random_forest$trees & 
           mtry == best_random_forest$mtry)
```

```{r}
random_forest_final_workflow = random_forest_workflow %>%
  finalize_workflow(best_random_forest)
```

```{r}
final_random_forest_model = random_forest_final_workflow %>%
  fit(NYSE_training)

test_predictions = final_random_forest_model %>% 
  predict(new_data = NYSE_test) %>%
  bind_cols(NYSE_test)

evaluation_metrics = test_predictions %>%
  metrics(truth = log_volume, estimate = .pred)

evaluation_metrics
```


### Boosting forecaster (30pts)

- Use the same features as in AR($L$) for the boosting. Tune the boosting algorithm and evaluate the test performance.

- Hint: [Workflow: Boosting tree for Prediction](https://ucla-biostat-212a.github.io/2025winter/slides/08-tree/workflow_boosting_reg.html) is a good starting point.


```{r}
boosting_recipe = recipe(data = NYSE_training, 
                         log_volume ~ .) %>%
  step_rm(day_of_week) %>%
  step_lag(DJ_return, log_volatility, lag = 1:5) %>%
  step_naomit(all_predictors()) %>%
  step_zv(all_numeric_predictors()) %>%
  prep(data = NYSE_training)
```

```{r}
boosting_model = boost_tree(mode = "regression",
                            trees = 1000,
                            tree_depth = tune(),
                            learn_rate = tune()) %>%
  set_engine("xgboost")
```

```{r}
boosting_workflow = workflow() %>%
  add_model(boosting_model) %>%
  add_recipe(boosting_recipe %>% step_rm(date) %>% step_indicate_na())
```

```{r}
boosting_grid = grid_regular(tree_depth(range = c(1L, 5L)), 
                                  learn_rate(range = c(-3, -0.1),
                                             trans = log10_trans()),
                                  levels = c(3,5))
```

```{r}
boosting_fit = tune_grid(boosting_workflow, resamples = month_folds, 
                            grid = boosting_grid)
```

```{r}
boosting_fit %>%
  collect_metrics() %>%
  filter(.metric == "rsq") %>%
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) + 
  geom_point() +
  labs(x = "Learn Rate", y = "RSQ")
```

```{r}
best_boosting = boosting_fit %>% select_best(metric = "rsq")

best_boosting
```


```{r}

# CV R2

boosting_fit %>% 
  collect_metrics() %>%
  filter(.metric == "rsq") %>%
  filter(tree_depth == best_boosting$tree_depth & 
           learn_rate == best_boosting$learn_rate)
```

```{r}
boosting_final_workflow = boosting_workflow %>%
  finalize_workflow(best_boosting)
```

```{r}
final_boosting_model = boosting_final_workflow %>%
  fit(NYSE_training)

test_predictions = final_boosting_model %>% 
  predict(new_data = NYSE_test) %>%
  bind_cols(NYSE_test)

evaluation_metrics = test_predictions %>%
  metrics(truth = log_volume, estimate = .pred)

evaluation_metrics
```



### Summary (30pts)

Your score for this question is largely determined by your final test performance.

Summarize the performance of different machine learning forecasters in the following format. 

| Method | CV $R^2$ | Test $R^2$ |
|:------:|:------:|:------:|:------:|
| Baseline | NA| 0.35 | |
| AR(5) |0.26 |0.22 |	|
| Random Forest |0.20 |0.19 | |
| Boosting | 0.20| 0.17| |


The baseline had a Test R2 value. The AR(5) method gave a CV R2 of 0.26 with a test R2 of 0.22. The Random Forest Method had a CV R2 of 0.20 and a test R2 of 0.19. The Boosting Method had a CV R2 of 0.20 and a Test R2 of 0.17. 

From this, it appears that the Baseline method seemed to provide the best results compared to the other three methods. However, I would say none of these methods do a satisfactory job at predicting the "log_volume" and I would not rely on any of these methods for dependable predicitions. Boosting seemed to do the worst job at predicting "log_volume" compared to the other methods, while the CV R2 seemed to be close to the CV R2 values for AR(5) and Random Forest.  





## ISL Exercise 12.6.13 (90 pts)

### 12.6.13 (b) (30 pts)

```{r}
data = read_csv("../../slides/data/Ch12Ex13.csv", 
                col_names = paste("ID", 1:40, sep = ""))

head(data)
```

```{r}
linkage1 = hclust(as.dist(1 - cor(data)), method = "complete")

plot(linkage1, main = "Cluster Dendrogram with Complete Linkage")
```

```{r}
linkage2 = hclust(as.dist(1 - cor(data)), method = "single")

plot(linkage2, main = "Cluster Dendrogram with Single Linkage")
```

```{r}
linkage3 = hclust(as.dist(1 - cor(data)), method = "average")

plot(linkage3, main = "Cluster Dendrogram with Average Linkage")
```

Yes, the genes separate the samples into 2 groups for most of the linkages. The only dendogram that seems to have 3 groups is with a linkage of "average". The linkages of "single" and "complete" both appear to separate into 2 main groups.
The "complete" linkage seems to separate the best according to the dendrogram plots. 


### PCA and UMAP (30 pts)


**PCA:**

```{r}
pca_values = prcomp(data, scale = TRUE)
```

```{r}
pca_recipe = recipe(~., data = data) %>%
  step_normalize(all_predictors()) %>%
  step_pca(all_predictors())

pca_prep = prep(pca_recipe)
```

```{R}
juice(pca_prep) %>%
  ggplot(aes(PC1, PC2)) +
  geom_point(alpha = 0.7, size = 2) +
  labs(color = NULL)
```

```{r}
library(embed)

umap_recipe = recipe(~., data = data) %>%
  step_normalize(all_predictors()) %>%
  step_umap(all_predictors())

umap_prep = prep(umap_recipe)
```

```{r}
juice(umap_prep) %>%
  ggplot(aes(UMAP1, UMAP2)) +
  geom_point(aes(), alpha = 1, size = 4) + 
  labs(color = NULL)
```


For both UMAP and PCA, there appears to be 2 separate clusters which I presume to indicate the "healthy" and "diseased" groups. One group also seems to have more density than the other.


### 12.6.13 (c) (30 pts)

```{r}
label = c(rep("healthy", 20), rep("diseased", 20))

p_values = apply(data, 1, function(x) {
  t.test(x[label == "healthy"], x[label == "diseased"])$p.value
})
```

```{r}
adjusted_p_values = p.adjust(p_values, method = "BH") 

significant_p_values = which(adjusted_p_values < 0.05)

significant_p_values
```
One method to determine which genes differ the most across the two groups is using Multiple Testing, as done above. Since we know that the first 20 columns are in the "healthy" group and the other 20 are in the "diseased" group, we can use t-test to get a p-value for each of the genes(rows). To correct for the false discovery rate, the Benjamini-Hochberg method is used to adjust the p-values. Then, the index of all the rows that have a p-value less than the 0.05 alpha value(significant) are found, which are the genes that differ the most across both groups.











